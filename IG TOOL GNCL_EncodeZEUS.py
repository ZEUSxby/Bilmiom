# Protected expiry-wrapped runner (auto-generated)
import sys, base64, datetime, hmac, hashlib

EXPECTED_PY_VER = '3.13'
PYTHON_VERSION = ".".join(sys.version.split()[0].split(".")[:-1])
if PYTHON_VERSION != EXPECTED_PY_VER:
    print("[!] Python sürümü uyumsuz. Beklenen:", EXPECTED_PY_VER, "Bulunan:", PYTHON_VERSION)
    sys.exit(1)

# Obfuscated key (base64 ters çevrilmiş). Runner bunu toparlayıp kullanacak.
KEY_OBF_B64_REV = '=EdpORJnJzMyH1wHnrEoAc0yS3QeT6K7oWGsbX5VK2jX'

# Şifreli expiry (base64). Bu, expiry_ts (ascii decimal bytes) XOR key ile karıştırıldı ve base64'e alındı.
EXPIRY_ENC_B64 = 'bwq8Zafrg1Cc3A=='

# İçteki (basic runner) base64 payload
INNER_RUNNER_B64 = ''

# HMAC-SHA256 hex signature (expiry_ts + INNER_RUNNER_B64 üzerinde)
SIG_HEX = 'fab922346ea0e54af8f399864ba7ae4aa49538f1145023230613f2fc2bff1188'

def _recover_key(k_obf_b64_rev):
    try:
        # ters çevirip base64 decode et
        k_b64 = k_obf_b64_rev[::-1]
        return base64.b64decode(k_b64)
    except Exception:
        return None

def _xor_bytes(data: bytes, key: bytes) -> bytes:
    out = bytearray(len(data))
    for i,b in enumerate(data):
        out[i] = b ^ key[i % len(key)]
    return bytes(out)

key = _recover_key(KEY_OBF_B64_REV)
if not key:
    print("[!] Anahtar çözülemedi. Dosya bozulmuş olabilir.")
    sys.exit(1)

# expiry'i çöz
try:
    expiry_enc = base64.b64decode(EXPIRY_ENC_B64)
    expiry_ts_bytes = _xor_bytes(expiry_enc, key)
    expiry_ts = int(expiry_ts_bytes.decode("utf-8"))
except Exception as e:
    print("[!] Expiry çözülemedi veya bozuk:", e)
    sys.exit(1)

# HMAC doğrulaması: expiry_ts + INNER_RUNNER_B64
mac_data = (str(expiry_ts) + INNER_RUNNER_B64).encode("utf-8")
calc_sig = hmac.new(key, mac_data, hashlib.sha256).hexdigest()
if not hmac.compare_digest(calc_sig, SIG_HEX):
    print("[!] İmza doğrulanamadı — dosya değiştirilmiş olabilir.")
    sys.exit(1)

# okunur ISO'yu expiry_ts'den üret (dosyada elle değiştirilen ISO etkisiz)
expiry_dt = datetime.datetime.fromtimestamp(expiry_ts, datetime.datetime.now().astimezone().tzinfo)
EXPIRY_ISO = expiry_dt.isoformat()

# zaman kontrolü
now_ts = int(datetime.datetime.now().astimezone().timestamp())
if now_ts > expiry_ts:
    print("[!] Bu kodun süresi dolmuş. Bitiş zamanı:", EXPIRY_ISO)
    sys.exit(0)

# iç runner'ı çöz ve çalıştır
try:
    inner_src = base64.b64decode(INNER_RUNNER_B64).decode("utf-8")
except Exception as e:
    print("[!] İç payload çözülemedi:", e)
    sys.exit(1)

exec(compile(inner_src, "<layer2>", "exec"))

